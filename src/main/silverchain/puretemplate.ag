import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.file.OpenOption;
import java.nio.file.Path;

import org.puretemplate.Group;
import org.puretemplate.GroupLoader;
import org.puretemplate.InputSupplier;
import org.puretemplate.Renderer;
import org.puretemplate.RendererDepth;
import org.puretemplate.Template;
import org.puretemplate.TemplateLoader;
import org.puretemplate.error.ErrorListener;
import org.puretemplate.model.Aggregate;
import org.puretemplate.model.AggregateBuilder;
import org.puretemplate.model.AttributeRenderer;
import org.puretemplate.model.ModelAdaptor;

$FROM_STRING =
    fromString(String source)
    | fromReader(Reader reader)
    | fromReader(InputSupplier<Reader> readerSupplier);

$FROM_STREAM =
    fromInputStream(InputStream inputStream)
    | fromInputStream(InputSupplier<InputStream> inputStreamSupplier)
    | fromResourceFile(String absolutePath)
    | fromResourceFile(ClassLoader classLoader, String absolutePath)
    | fromResourceFile(Class<?> reference, String relativePath)
    | fromFile(Path file)
    | fromFile(File file)
    | fromFile(String filePath);

$USING_CHARSET = usingCharset(Charset charset);

$WITH_DELIMITERS = withDelimiters(char start, char stop);

TemplateLoader
{
    Template

    (
        $FROM_STRING
        |
        (
            $FROM_STREAM
            $USING_CHARSET?
        )
    )

    (
        $WITH_DELIMITERS
        | attachedToGroup(Group group)
    )
    ?

    build();
}

$UNRESTRICTED_GROUP_OPTIONS =
(
    importTemplates(Group otherGroup) |
    registerModelAdaptor<T>(Class<T> attributeType, ModelAdaptor<? super T> adaptor) |
    registerAttributeRenderer<T>(Class<T> attributeType, AttributeRenderer<? super T> renderer, RendererDepth depth)
);

GroupLoader
{
    Group

    (
        $FROM_STRING
        |
        (
            (
                $FROM_STREAM
                | fromDirectory(String directoryPath)
                | fromDirectory(File directory)
                | fromDirectory(Path directory)
                | fromResourceDirectory(String absolutePath)
                | fromResourceDirectory(Class<?> reference, String relativePath)
            )

            $USING_CHARSET?
        )
        |
        blank()
    )

    // Allow only one call of each with*() method, but in any order, and mixed with other, unrestricted methods
    $UNRESTRICTED_GROUP_OPTIONS*
    {
        (
            $WITH_DELIMITERS?
            $UNRESTRICTED_GROUP_OPTIONS*
        ),
        (
            withErrorListener(ErrorListener listener)?
            $UNRESTRICTED_GROUP_OPTIONS*
        ),
        (
            withLegacyRendering()?
            $UNRESTRICTED_GROUP_OPTIONS*
        )
    }

    build();
}

$WITH_LINE_WRAPPING = withLineWrapping(int lineLength)?;

Renderer
{
    int
    $WITH_LINE_WRAPPING
    (
        intoWriter(Writer writer)
        |
        intoOutputStream(OutputStream outputStream)
        |
        intoOutputStream(OutputStream outputStream, Charset charset)
        |
        intoFile(File file) throws IOException
        |
        intoFile(File file, Charset charset) throws IOException
        |
        intoFile(Path file) throws IOException
        |
        intoFile(Path file, Charset charset, OpenOption... options) throws IOException
    )
    ;

    String
    $WITH_LINE_WRAPPING
    intoString()
    ;
}

AggregateBuilder
{
    Aggregate
    properties(
        String nameA,
        String nameB
    )
    withValues(
        Object valueA,
        Object valueB
    )
    ;

    Aggregate
    properties(
        String nameA,
        String nameB,
        String nameC
    )
    withValues(
        Object valueA,
        Object valueB,
        Object valueC
    )
    ;

    Aggregate
    properties(
        String nameA,
        String nameB,
        String nameC,
        String nameD
    )
    withValues(
        Object valueA,
        Object valueB,
        Object valueC,
        Object valueD
    )
    ;

    Aggregate
    properties(
        String nameA,
        String nameB,
        String nameC,
        String nameD,
        String nameE
    )
    withValues(
        Object valueA,
        Object valueB,
        Object valueC,
        Object valueD,
        Object valueE
    )
    ;

    Aggregate
    properties(
        String nameA,
        String nameB,
        String nameC,
        String nameD,
        String nameE,
        String nameF
    )
    withValues(
        Object valueA,
        Object valueB,
        Object valueC,
        Object valueD,
        Object valueE,
        Object valueF
    )
    ;

    Aggregate
    properties(
        String nameA,
        String nameB,
        String nameC,
        String nameD,
        String nameE,
        String nameF,
        String nameG
    )
    withValues(
        Object valueA,
        Object valueB,
        Object valueC,
        Object valueD,
        Object valueE,
        Object valueF,
        Object valueG
    )
    ;

    Aggregate
    properties(
        String nameA,
        String nameB,
        String nameC,
        String nameD,
        String nameE,
        String nameF,
        String nameG,
        String nameH
    )
    withValues(
        Object valueA,
        Object valueB,
        Object valueC,
        Object valueD,
        Object valueE,
        Object valueF,
        Object valueG,
        Object valueH
    )
    ;
}
